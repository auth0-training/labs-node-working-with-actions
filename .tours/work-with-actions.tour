{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Work with Actions",
  "steps": [
    {
      "description": "**Here's what you'll do:**  \n\n1. #### Create an explicit Allow User List\n2. #### Create an Allow User List for Admin Applications\n3. #### Enable Admin Only Access for Admin Applications",
      "title": "What you'll do"
    },
    {
      "title": "Explicitly allow specific users",
      "description": "## Explicitly allow specific users\nAs an application developer, you have just joined a brand new team tasked with building an internal application for managing your customer accounts. As an experienced developer, you realize how much of a pain it is to build good access control on this type of application, so you have decided to give Auth0 a spin to see what it might be able to do to help you through this arduous task.  \n\nTo start off you are going to create an allow list of user emails that are allowed to log in.\n\n1. #### Navigate to the [Flows](https://manage.auth0.com/#/actions/flows) section of the dashboard. \n   This can be found under _Actions_ in the left-hand navigation menu.  \n    \n1. #### Select the _Login_ flow.  \n      \n1. #### Click the _+_ next to _Add Action_, and select _Build Custom_. \n      \n1. #### Enter the _Name_ \"User Allow List\". Keep the defaults for _Trigger_ (Login/Post Login) and _Runtime_ (Node 16).\n\n1. #### Copy and paste the following code sample into the text editor:  \n      \n    ```javascript\n    exports.onExecutePostLogin = async (event, api) => {\n\n        // List of user emails allowed to access admin applications\n        const userAllowList = [\n            'user1@example.com',\n            'user2@example.com',\n        ];\n        \n        // Determine if the passed email value is in the userAllowList\n        const isAllowListedUser = email => (userAllowList.includes(email));\n        \n        // If the user is not on the allow list, deny access\n        if (!isAllowListedUser(event.user.email)) {\n            api.access.deny(`Access to ${event.client.name} is not allowed.`);\n        }\n    };\n\n    ```\n\n\n    This code sample uses the [Post-login Event Object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object) and the [Post-login API Object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/api-object).\n    \n1. #### The Actions code editor offers the ability to test the code by simulating a call to the Action using a sample payload. To try it out, complete the following steps. \n    1. Click the triangular play button in the top left corner of the code editor.\n    1. The _Test_ tab shows the `event` object that is passed to the Action. Scroll down to see all the information it contains. \n    1. Take a look at `event.user.email` and note that the default value is `\"j+smith@example.com\"`.\n    1. Also note that the default for `event.client.name` is `\"All Applications\"`.\n    1. Click _Run_ to try running the Action with the email `\"j+smith@example.com\"`. \n    1. This email address is not included in the User Allow List, so the following error should appear.\n        ```javascript\n            {\n                \"message\": \"Access to All Applications is not allowed.\",\n                \"reason\": \"access_denied\",\n                \"type\": \"AccessDenied\"\n            }\n        ```\n    1. Next, change the user's email to `\"user1@example.com\"` and click _Run_ again.\n    1. Check that there are no errors under _Commands_ and _Errors_ in the Test Results. This indicates that the user would be allowed to access the application.\n\n1. #### Now that you have verified that the Action is working as intended, click the _Deploy_ button in the upper right corner. \n   This will deploy the Action. However, it will not be executed until it has been added to a Flow.      \n    \n1. #### Add the Action to a Flow. \n   1. Navigate to the [Flows](https://manage.auth0.com/#/actions/flows) section of the dashboard. (This can be found in the left-hand navigation menu under _Actions_.) \n   1. Click the _Login_ Flow.\n   1. Under _Add Action_, select the _Custom_ tab.\n   1. Drag and drop the _User Allow List_ Action into the flow.\n   1. Click the _Apply_ button in the upper right corner.\n      \n    \n1. #### Now that the Action has been deployed and added to the Login flow, it is in effect. Only users on the Allow List will be able to access applications.    \n    For more detail on end-to-end verification of the Login Flow, visit [Debug Deployed Actions](https://auth0.com/docs/customize/actions/test-actions#debug-deployed-actions) in the Auth0 Documentation."
    },
    {
      "title": "Limit your list to a specific application",
      "description": "## Limit your list to a specific application\nYour first test was a success, but unfortunately, now no one can login to any application except for the users in your allow list! This time you want to create a rule that only runs for specific admin applications and only allows your allow list of users to gain access.\n\n1. #### Create a new Action and name it \"User Allow List for Admin Applications\". Use the defaults for Trigger (Login/Post Login) and runtime.\n\n1. #### Copy and paste the following code sample into the text editor:    \n      \n    ```javascript\n    exports.onExecutePostLogin = async (event, api) => {\n        \n        // List of administrative applications\n        const adminApps = [\n            'User Management App',\n            'Account Management App'\n        ];\n        \n        // Determine if the requesting application is in the adminApp list\n        const isAdminApp = appName => adminApps.includes(appName);\n\n        // If the app is not an Admin App, exit the Action.\n        if (!isAdminApp(event.client.name)) {\n            console.log(`EXIT ACTION: ${event.client.name} is not an admin app`);\n        return;\n        }\n        \n        // List of user emails allowed to access admin applications\n        const userAllowList = [\n            'user1@example.com',\n            'user2@example.com',\n        ];\n        \n        // Determine if the passed email value is in the userAllowList\n        const isAllowListedUser = email => (userAllowList.includes(email));\n        \n        // If the user is not on the allow list, deny access\n        if (!isAllowListedUser(event.user.email)) {\n            api.access.deny(`Access to ${event.client.name} is not allowed by ${event.user.email}.`);\n        }\n    };\n    ```\n      \n    \n1. #### Click the triangular play button in the upper right corner of the text editor to open the Test dialog.  \n    \n1. #### Without editing the Event test object, click the _Run_ button to run the Action. \n   At the bottom of the _Test Results_ under _Logs_, you should see EXIT ACTION: All Applications is not an admin app.\n      \n    \n1. #### Next, change `event.client.name` in the Test dialog to \"Account Management App\" and run the action again. \n    This time the _Test Results_ should show the following error.\n    ```javascript\n      {\n        \"message\": \"Access to Account Management App is not allowed by j+smith@example.com.\",\n        \"reason\": \"access_denied\",\n        \"type\": \"AccessDenied\"\n      }\n    ```   \n    \n1. #### Finally, modify the Event test object one more time and update `event.user.email` to `\"user2@example.com\"`. Then, run the action again.\n    This time the _Test Results_ should not show an error nor the EXIT ACTION message.   "
    },
    {
      "title": "Flag specific users for access to specific applications",
      "description": "## Flag specific users for access to specific applications\n\nYou can tell you are on the right track, but maintaining an Allow List of admin users seems like more maintenance than you care to bear. What if you could instead flag users that are administrators? In this step, you will add metadata to the user's profile in order to flag admins.\n\n1. #### Create a new Action and name it \"Admin Only Access for Admin Applications\". Use the defaults for Trigger (Login/Post Login) and runtime.\n\n1. #### Copy and paste the following code sample into the text editor:    \n      \n    ```javascript\n    function userAllowListForAdminApps(user, context, callback) {\n        \n        // List of administrative applications \n        const adminApps = [\n            'User Management App',\n            'Account Management App',\n            // This is the clientName value when testing a connection\n            'All Applications',\n        ];\n        \n        // Determine if the requesting application is in the adminApp list\n        const isAdminApp = appName => adminApps.includes(appName);\n        \n        if (!isAdminApp(context.clientName)) {\n            console.log(`EXIT ACTION: ${context.clientName} is not an admin app`);\n            callback(null, user, context);\n        }\n        \n        // Determine if the passed email value is in the userAllowList\n        const isAdminUser = user.app_metadata && user.app_metadata.admin === true;\n        \n        // If the user is not allow listed return and Unauthorized Error\n        if (!isAdminUser) {\n            return callback(new UnauthorizedError(\n            `Access denied: ${user.email} not allowed to access an admin application`)\n            );\n        }\n        \n        // Otherwise continue without an error\n        callback(null, user, context);\n    }\n    ```\n    \n1. #### Click the triangular play button in the upper right corner of the text editor to open the Test dialog.  \n    \n1. #### Edit the Event object, so that `event.client.name` is \"Account Management App\". Then, click the `Run` button to try the Action.\n    Since \"Account Management App\" is included in the list of Admin Apps, and the default user does not have `app_metadata.admin` set to `true`, access is denied.\n    ```javascript\n        {\n            \"message\": \"Access denied:  j+smith@example.com not allowed to access an admin application.\",\n            \"reason\": \"access_denied\",\n            \"type\": \"AccessDenied\"\n        }\n    ```\n\n    \n1. #### Next, change the user's app metadata so that they are flagged as an admin. In the Event object, find `user.app_metadata` and replace the empty object `{}` with `{\"admin\": true}`. Then, click the `Run` button to try the Action.\n    This should run with no errors in the Test Results, meaning the user may gain access to the app.\n"
    },
    {
      "title": "Recap",
      "description": "## Recap\nConsider the following:  \n\n*   Why might it be a bad idea to create an email allow list?\n*   Why did we place the check for the admin app above the user allow list logic?\n*   Why did we use app\\_metadata rather than user\\_metadata to place the admin flag on the user?\n*   How else might you be able to make this rule easier to maintain as you develop more administrative applications?\n*   Can you think of any other ways without using rules we could have restricted the users that have access to admin applications?"
    }
  ],
  "ref": "2c41a5275f7a03e90ccda056b36ebdd5815af3fb"
}