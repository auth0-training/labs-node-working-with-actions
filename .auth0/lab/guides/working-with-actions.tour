{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Work with Actions",
  "steps": [
    {
      "file": "",
      "line": 1,
      "description": "## Overview\n\n[Auth0 Actions](https://auth0.com/docs/customize/actions) are secure, tenant-specific, versioned functions written in Node.js that execute at certain points within the Auth0 platform. Actions are used to customize and extend Auth0's capabilities with custom business logic.\n\n**Here's what you'll do:**  \n\n1. Create and deploy an Action that implements an explicit Allow User List\n1. Try out the Action\n1. Create an Action that implements an Allow User List for Admin Applications\n1. Create an Action that enables Admin Only Access for Admin Applications",
      "title": "Overview",
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 1
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Write an Action that explicitly allows specific users",
      "description": "## Write an Action that explicitly allows specific users\n\nAs an application developer, you have just joined a brand new team tasked with building an internal application for managing your customer accounts. As an experienced developer, you realize how much of a pain it is to build good access control on this type of application, so you have decided to give Auth0 a spin to see what it might be able to do to help you through this arduous task.  \n\nTo start off you are going to create an allow list of user emails that are allowed to log in.\n\n1. From the [Auth0 Management Dashboard](https://manage.auth0.com), go to **Actions** > **Triggers**.\n    \n1. Select the **post-login** trigger.  \n      \n1. Click the **+_** next to Add Action, and select **Build From Scratch**. \n      \n1. Name the Action **User Allow List**.\n\n1. Keep all other fields as their default value, and select the the **Create** button.\n\n1. Copy and paste the following code sample into the text editor:  \n      \n    ```javascript\n    exports.onExecutePostLogin = async (event, api) => {\n\n        // List of user emails allowed to access admin applications\n        const userAllowList = [\n            'user1@example.com',\n            'user2@example.com',\n        ];\n        \n        // Determine if the passed email value is in the userAllowList\n        const isAllowListedUser = email => (userAllowList.includes(email));\n        \n        // If the user is not on the allow list, deny access\n        if (!isAllowListedUser(event.user.email)) {\n            api.access.deny(`Access to ${event.client.name} is not allowed.`);\n        }\n    };\n\n    ```\n\n\n    This code sample uses the [Post-login Event Object](https://auth0.com/docs/customize/actions/explore-triggers/signup-and-login-triggers/login-trigger/post-login-event-object) and the [Post-login API Object](https://auth0.com/docs/customize/actions/explore-triggers/signup-and-login-triggers/login-trigger/post-login-api-object).\n    \n    "
    },
    {
      "title": "Test the Action with a Sample Payload",
      "description": "## Test the Action with a Sample Payload\n\nThe Actions code editor offers the ability to test the code by simulating a call to the Action using a sample payload. To try it out, complete the following steps. \n\n1. Click the triangular play button in the top left corner of the code editor.\n1. The _Test_ tab shows the `event` object that is passed to the Action. Scroll down to see all the information it contains. \n1. Find `event.user.email` and note that the default value is `\"j+smith@example.com\"`.\n1. Also note that the default value for `event.client.name` is `\"All Applications\"`.\n1. Click _Run_ to try running the Action with the email `\"j+smith@example.com\"`. \n1. This email address is not included in the User Allow List, so the following error should appear.\n    ```javascript\n        {\n            \"message\": \"Access to All Applications is not allowed.\",\n            \"reason\": \"access_denied\",\n            \"type\": \"AccessDenied\"\n        }\n    ```\n1. Next, change the value of `event.user.email` to `\"user1@example.com\"` and click **Run** again.\n1. Check that there are no errors under _Commands_ and _Errors_ in the Test Results. This indicates that the user would be allowed to access the application.\n"
    },
    {
      "title": "Deploy your Action",
      "description": "## Deploy your Action\n\n Now that you have verified that the Action is working as intended let's deploy it and add it to the post-login trigger!\n \n 1. Select the **Deploy* button. \n> This will deploy the Action. However, it will not be executed as part of your tenant's logic until it has been added to the trigger.      \n1. Select the **Back to triggers** link.\n1. From the **Add Action** section, select the **Custom** tab.\n1. Drag and drop the **User Allow List** Action between Start and Complete.\n1. Select **Apply**.\n> Now that the Action has been deployed and added to the post-login trigger, it is in effect. Only users on the Allow List will be able to access this tenant's applications."
    },
    {
      "title": "Try out your Action",
      "description": "## Try out your Action\n\nNow that you have created an Action, deployed it, and added it to the popst-login trigger, let's try it out using the Universal Login page.\n\nFirst, let's make sure you have two test users available. One should be on the User Allow List and the other should not.\n\n1. From the Auth0 Dashboard, navigate to **User Management** > [**Users**](https://manage.auth0.com/dashboard/#/users).\n\n1. Select the **+ Create User** button, and create a user with the email `user1@example.com` (one that IS on the Allow List). Make sure to remember the password.\n\n1. Repeat the process for a second user with an email address `user999@example.com` (one that is NOT on the Allow List). Make sure to remember the password.\n\n1. From the Auth0 Dashboard, navigate to **Authentication** > [**Authentication Profile**](https://manage.auth0.com/dashboard/#/authentication-profiles).\n\n1. #### Select the **Try** button in the upper right corner.\n\n1. Log in using the email `user1@example.com`.\n> This email is on the Allow User List, so you should see a successful login.\n\n1. Log in using the email `user999@example.com`.\n    This email is not allowed access to the application, so you should see the error message.\n    ```javascript\n    {\n        \"error\": \"access_denied\",\n        \"error_description\": \"Access to All Applications is not allowed.\"\n    }\n    ```\n"
    },
    {
      "title": "Cleanup",
      "description": "## Cleanup\n\n\n Now that you have seen how this Action works, let's remove it from the post-login trigger. Make sure to complete this step if you are planning on completing additional Labs using the same tenant!\n1. From the Auth0 Management Dashboard, navigate to **Actions** > **Triggers**.\n1. Select the **post-login** trigger.\n1. Select the **User Allow List** Action where it appears in the trigger.\n1. Select the **Remove** button.\n1. Select the **Apply** button to save your changes.\n\nThe User Allow List Action has been removed from the trigger and will no longer affect logins on this tenant. If you would like to permanently delete the code (optional), navigate to **Actions** > **Library**, choose the **Custom** tab, and use the **...** dropdown to select **Delete**."
    },
    {
      "file": "",
      "line": 1,
      "title": "Limit your list to a specific application",
      "description": "## Limit your list to a specific application\nYour first test was a success, but unfortunately, with that Action, no one could log in to any application except for the users in your allow list! What if you only wanted to impose this restriction on a subset of your applications, with all other applications being generally available to everyone? Let's check out how to do that with an Action!\n\n1. Go to **Actions** > **Triggers** and create a new **post-login** Action named **User Allow List for Admin Applications**.\n\n1. Copy and paste the following code sample into the text editor:    \n      \n    ```javascript\n    exports.onExecutePostLogin = async (event, api) => {\n        \n        // List of administrative applications\n        const adminApps = [\n            'User Management App',\n            'Account Management App'\n        ];\n        \n        // Determine if the requesting application is in the adminApp list\n        const isAdminApp = appName => adminApps.includes(appName);\n\n        // If the app is not an Admin App, exit the Action.\n        if (!isAdminApp(event.client.name)) {\n            console.log(`EXIT ACTION: ${event.client.name} is not an admin app`);\n            return;\n        }\n        \n        // List of user emails allowed to access admin applications\n        const userAllowList = [\n            'user1@example.com',\n            'user2@example.com',\n        ];\n        \n        // Determine if the passed email value is in the userAllowList\n        const isAllowListedUser = email => (userAllowList.includes(email));\n        \n        // If the user is not on the allow list, deny access\n        if (!isAllowListedUser(event.user.email)) {\n            api.access.deny(`Access to ${event.client.name} is not allowed by ${event.user.email}.`);\n        }\n    };\n    ```\n      \n    \n1. Select the triangular **play** button to open the Test dialog.  \n    \n1. Without editing the Event test object, select the **Run** button to run the Action. \n > At the bottom of the Test Results under Logs, you should see: `EXIT ACTION: All Applications is not an admin app`.\n      \n    \n1.  Next, change `event.client.name` in the Test dialog to **\"Account Management App\"** and run the Action again. \n    This time the _Test Results_ should show the following error.\n    ```javascript\n      {\n        \"message\": \"Access to Account Management App is not allowed by j+smith@example.com.\",\n        \"reason\": \"access_denied\",\n        \"type\": \"AccessDenied\"\n      }\n    ```   \n    \n1. Finally, modify the Event test object one more time and update `event.user.email` to **\"user2@example.com\"**. Then, run the action again.\n> This time the Test Results should not show an error or the `EXIT ACTION` message.   \n\n**That's it! This Action is complete.**\n> Note that for this example, we will not repeat the steps to deploy and add the Action to a trigger. These additional steps would need to be taken in order for the Action to be executed as part of your tenant's custom business logic."
    },
    {
      "file": "",
      "line": 1,
      "title": "Flag specific users for access to specific applications",
      "description": "## Flag specific users for access to specific applications\n\nYou can tell you are on the right track, but maintaining an Allow List of admin users seems like more maintenance than you care to bear. What if you could instead flag users who are administrators? In this step, you will add metadata to the user's profile in order to flag admins.\n\n1. Go to **Actions** > **Triggers** and create a new **post-login** Action name it **Admin Only Access for Admin Applications**. \n\n1. Copy and paste the following code sample into the text editor:    \n      \n    ```javascript\n    exports.onExecutePostLogin = async (event, api) => {\n        // List of administrative applications\n        const adminApps = [\n            'User Management App',\n            'Account Management App',\n        ];\n        \n        // Determine if the requesting application is in the adminApp list\n        const isAdminApp = appName => adminApps.includes(appName);\n        \n        // If it is not an admin app, exit the Action\n        if (!isAdminApp(event.client.name)) {\n            console.log(`EXIT ACTION: ${event.client.name} is not an admin app`);\n            return;\n        }\n        \n        // Determine if the passed email value is in the userAllowList\n        const isAdminUser = event.user.app_metadata && event.user.app_metadata.admin === true;\n        \n        // If the user is not allow listed return and Unauthorized Error\n        if (!isAdminUser) {\n            api.access.deny(`Access denied: ${event.user.email} not allowed to access an admin application.`);\n        }\n    };\n    ```\n    \n1. Select the triangular **play** button to open the Test dialog.  \n    \n1. Edit the Event object, so that `event.client.name` is **\"Account Management App\"**. \n\n1. Select the **Run**button to try the Action.\n> Since `\"Account Management App\"` is included in the list of Admin Apps, and the default user does not have `app_metadata.admin` set to `true`, access is denied. You should see the following error message:\n\n    ```javascript\n        {\n            \"message\": \"Access denied:  j+smith@example.com not allowed to access an admin application.\",\n            \"reason\": \"access_denied\",\n            \"type\": \"AccessDenied\"\n        }\n    ```\n\n    \n1. Next, change the user's app metadata so that they are flagged as an admin. In the Event object, find `user.app_metadata` and replace the empty object `{}` with **{\"admin\": true}**. \n\n1. Select the **Run** button to try the Action.\n> This should run with no errors in the Test Results, meaning the user may gain access to the app. This Action is working as desired. For admin apps, the user metadata must have the admin flag set to `true` in order to gain access to those particular applications. Recall that for this Action to be implemented, it would need to be deployed and added to a trigger. "
    },
    {
      "file": "",
      "line": 1,
      "title": "Recap",
      "description": "## Recap\nConsider the following:  \n\n*   Why might it be a bad idea to create an email allow list?\n*   Why did we place the check for the admin app above the user allow list logic?\n*   Why did we use app\\_metadata rather than user\\_metadata to place the admin flag on the user?\n*   How else might you be able to make this Action easier to maintain as you develop more administrative applications?\n*   Can you think of any other ways without using Actions we could have restricted the users that have access to admin applications?"
    }
  ]
}
